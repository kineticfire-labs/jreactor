package com.kineticfire.patterns.reactor;

/**
 * Copyright 2010 KineticFire.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import com.kineticfire.patterns.reactor.Handle;
import com.kineticfire.patterns.reactor.Handler;

/**
 * Defines the interface for SpecificSelector objects. SpecificSelectors are
 * responsible for managing the registration status of event sources and perform
 * or facilitate readiness selection on the event sources. SpecificSelectors
 * must support common capabilities to include: changing the interest operations
 * of a handle, dealing with a fired event that was not dispatched, resuming
 * selection on a handle that finished running, and deregistering a handle.
 * <p>
 * A SpecificSelector should be register an event handler with interest
 * operations for an event source. The successful registration should return a
 * unique Handle that represents the relationship of the registered event source
 * and the event handler. Otherwise, methods specific to an event-type are
 * deferred to the individual selectors.
 * <p>
 * Selectors should state if they are thread-safe.
 * 
 * @author Kris Hall
 * @version 07-01-09
 */


public interface SpecificSelector {
    

    /**
     * Sets the interest operations for a handle.
     * <p>
     * PRECONDITION: handle and errorhandler are not null
     * 
     * @param handle
     *            reference to the event source and handler relationship for
     *            which to change the interest operations
     * @param interestOps
     *            interest operations to assign the handle
     * @throws InvalidInterestOpsException
     *             if interestOps is not in a valid range for the given handle
     */
    public void interestOps( Handle handle, int interestOps );

    
    
    /**
     * Notifies the selector that an event with the given handle had fired but
     * was not dispatched. Individual selectors should manage these
     * notifications as appropriate.
     * <p>
     * PRECONDITION: handle is not null
     * 
     * @param handle
     *            reference to the event source and handler relationship for
     *            which to notify that a fired event was not dispatched
     * @param event
     *            the event generated by the event source
     */
    public void checkin( Handle handle, Event event );
    
    
    
    /**
     * Notifies the selector that an event handler servicing the given handle
     * has completed and that the handle should be re-enabled to generate
     * events.
     * <p>
     * PRECONDITION: handle is not null
     * 
     * @param handle
     *            reference to the event source and handler relationship for
     *            which to notify that the handle may be re-enabled to generate
     *            events
     */
    public void resumeSelection( Handle handle );
    
    
    
    /**
     * Deregisters a handle from the selector. The event source managed by the
     * selector is removed from selector control and readiness selection; the
     * event source will no longer generate events.
     * <p>
     * PRECONDITION: handle and errorHandler are not null
     * 
     * @param handle
     *            reference to the event source and handler relationship for
     *            which to remove
     */
    public void deregister( Handle handle );
    
}
